/*
 * Класс описывает окна с таблицей факультетов
 * Все действия происходят в этом класе
 */
package gui.dictionaries;

import database.tableModal.DepartmentTableModal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import settings.ConfigureProgramm;
import util.SMS;

/**
 *
 * @author Aleo
 */
public class DepartmentFrame extends javax.swing.JFrame {

    /**
     * Creates new form DepartmentFrame
     */
    public DepartmentFrame() {
        initComponents();
        updateTableDepartment();
    }

    /**
     * Метод обновляет данные в таблице
     * И если необходимо скарывает столбец
     */
    private void updateTableDepartment() {

        try {
            DepartmentTableModal modal = new DepartmentTableModal();
            jTableDepartment.setModel(modal);
        } catch (SQLException ex) {
            SMS.error(this, ex.toString());
            Logger.getLogger(DepartmentFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (!ConfigureProgramm.isDEBAG()) {
            // Если программа не врежиме отладки, то скроем колонку с id
            jTableDepartment.getColumnModel().getColumn(0).setMaxWidth(0);
            jTableDepartment.getColumnModel().getColumn(0).setMinWidth(0);
            jTableDepartment.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTableDepartment.getColumnModel().getColumn(0).setResizable(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDepartment = new javax.swing.JTable();
        jButtonAdd = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Кафедры");
        setAlwaysOnTop(true);
        setType(java.awt.Window.Type.UTILITY);

        jTableDepartment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Загрузка"
            }
        ));
        jScrollPane1.setViewportView(jTableDepartment);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
        );

        jButtonAdd.setText("Добавить");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonEdit.setText("Изменить");
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEdit)
                        .addGap(0, 172, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonEdit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Событие нажатия кнопки добавления кафедры Необходимо показать окно, а
     * наше окно сделать не активным
     *
     * @param evt
     */
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        String nameDepartment;
        this.setEnabled(false);
        // Цыкл необходим для того, что бы было несколько попыток у пользователя
        do {
            nameDepartment = SMS.input(this, "Введите название кафедры:");
            if (nameDepartment != null) {
                if (nameDepartment.trim().length() > 0) {
                    if (inputIntoDepartment(nameDepartment)) {
                        // Выходим с цикла
                        break;
                    }
                } else {
                    SMS.warning(this, "Вы ничего не ввели");
                }
            }
        } while (nameDepartment != null);
        this.setEnabled(true);
    }//GEN-LAST:event_jButtonAddActionPerformed

    /**
     * Событие нажатия кнопки редактирования значения в таблице
     *
     * @param evt
     */
    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
        String nameDepartment = null;
        //Делаем окно недоступным
        this.setEnabled(false);
        // Получаем количество выделеных строк в таблице
        int countSelect = jTableDepartment.getSelectedColumnCount();
        if (countSelect == 0) {
            // Значит ни одной строки не выбратно
            SMS.warning(this, "Вы не выбрали данные для редактирования");
        } else if (countSelect > 1) {
            // Значит выбрано больше одной строки
            SMS.warning(this, "Выберите только одно значение в таблице");
        } else { // Все нормально и можем показть окно ввода
            // Считываем значение из теблицы
            nameDepartment = (String) jTableDepartment.getValueAt(
                    jTableDepartment.getSelectedRow(), 1);
            // Цыкл необходим для того, что бы было несколько попыток у пользователя
            do {

                String newDepartment = 
                        SMS.input(this, 
                        "Введите новое название кафедры:",
                        null, 
                        nameDepartment);
                
                // Если выбрали ДА
                if (newDepartment != null) {
                    if (newDepartment.trim().length() > 0) {
                        // Значит то что ввели не пустое!!!
                        if (!nameDepartment.equals(newDepartment)) {
                            // Если введенное значение отличаеться то заносим в базу данных
                            boolean res = updateDataBase((Integer) 
                                    jTableDepartment.
                                    getValueAt(jTableDepartment.
                                    getSelectedRow(), 0),newDepartment);
                            if(res){
                                break;
                            }
                        } else {
                            // Иначе мы игнорируем и ничего не делаем
                            // Хотя может быть надо выводить сообщение
                            
                            break;
                        }
                    } else {
                        SMS.warning(this, "Вы ничего не ввели");
                    }
                } else { // Если Выбрали НЕТ
                    break;
                }
            } while (true);

        }

        // Окно сново доступно
        this.setEnabled(true);
    }//GEN-LAST:event_jButtonEditActionPerformed

    /**
     * Метод добавления в безу данных
     * Этот метод так же проверяет на наличие данной строчки в базе
     * 
     * @param name - то что надо передать в базу
     * @return true если добавлено или не надо еще делать попыток, 
     *         false - если такое уже есть в базе.
     */
    private boolean inputIntoDepartment(String name) {
        boolean ret = true;
        try {
            // Получаем соединение с базой
            Connection conn = database.DataBaseConnect.getConnection();
            Statement st = conn.createStatement();
            // Формируем запрос на проверку
            ResultSet rs = st.executeQuery("Select * "
                    + "from Department where name_department = '" + name + "';");
            if (!rs.next()) {
                // Значит в базе такого значения нет
                int resalt = st.executeUpdate("insert into "
                        + "department(name_department) values('" + name + "');");
                if (resalt == 0) {
                    SMS.error(this, "Произошла ошибка при добавлении значения!",
                            "Ошибка добавления");
                } else {
                    // Все прошло удачно, можем обновить таблицу
                    this.updateTableDepartment();
                }
            } else {
                // Такое значение уже есть
                if (SMS.query(this, "Такое значение уже есть.\n"
                        + "Хотете еще раз ввести значение?")) {
                    ret = false;
                } else {
                    ret = true;
                }
            }
        } catch (SQLException ex) {
                    SMS.error(this, ex.toString(),"Ошибка добавления");
            Logger.getLogger(DepartmentFrame.class.getName())
                    .log(Level.SEVERE, null, ex);
        } finally {
            return ret;
        }
    }

    /**
     * Метод изменения значений в базе данных
     * @param id - кому надо поменять значение
     * @param name - на какое значение
     * @return true - если значение изменино
     *         false - значение не изменино
     */
    private boolean updateDataBase(int id, String name) {
        boolean result = true;
        try {
            Connection conn = database.DataBaseConnect.getConnection();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("Select * "
                    + "from Department where name_department = '" + name +
                    "' and id_department <> "+id+";");
            if (!rs.next()) {
                // Значит в базе такого значения нет
                int resalt = st.executeUpdate("update department "
                        + "set name_department = '" + name + "' Where id_department = "+id+";");
                if (resalt == 0) {
                    SMS.error(this, "Произошла ошибка при изменении значения!",
                            "Ошибка изменения");
                } else {
                    // Все прошло удачно, можем обновить таблицу
                    this.updateTableDepartment();
                }
            } else {
                // Такое значение уже есть
                if (SMS.query(this, "Такое значение уже есть.\n"
                        + "Хотете еще раз ввести значение?")) {
                    result = false;
                } else {
                    result = true;
                }
            }
        } catch (SQLException ex) {
            SMS.error(this, ex.toString(), "Ошибка добавления");
            Logger.getLogger(DepartmentFrame.class.getName())
                    .log(Level.SEVERE, null, ex);
        } finally {
            return result;
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableDepartment;
    // End of variables declaration//GEN-END:variables
}
