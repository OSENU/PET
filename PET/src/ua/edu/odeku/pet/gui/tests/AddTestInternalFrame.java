/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ua.edu.odeku.pet.gui.tests;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import ua.edu.odeku.pet.gui.PetJInternalFrame;
import ua.edu.odeku.pet.util.SMS;

/**
 *
 * @author Aleo
 */
public class AddTestInternalFrame extends PetJInternalFrame {

    SelectedTypeAskPanel[] selectedTypeAskPanels;

    /**
     * Creates new form AddTestInternalFrame
     */
    public AddTestInternalFrame() {
        super();
        initComponents();
        try {
            registTestPanel.init();
        } catch (SQLException ex) {
            SMS.error(ex.getMessage());
            Logger.getLogger(TestsFrame.class.getName()).log(Level.SEVERE, null, ex);
            this.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        registTestPanel = new ua.edu.odeku.pet.gui.tests.RegistTestPanel();
        jButtonCreate = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        jButtonSave = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();

        setMinimumSize(new java.awt.Dimension(930, 720));
        setName("addTestFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(953, 781));

        jButtonCreate.setText("Создать");
        jButtonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateActionPerformed(evt);
            }
        });

        jButtonSave.setText("Сохранить");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane)
                            .addGroup(jPanelLayout.createSequentialGroup()
                                .addComponent(registTestPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCreate)
                    .addComponent(registTestPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateActionPerformed
        jProgressBar.setIndeterminate(true);
        if (selectedTypeAskPanels != null) {
            if (!SMS.query("Все тесты будут потеряны.\nПродолжить?")) {
                jProgressBar.setIndeterminate(false);
                return;
            }
        }
        int countTest = registTestPanel.getCountTest();
        selectedTypeAskPanels = new SelectedTypeAskPanel[countTest];
        jTabbedPane.removeAll();
        for (int i = 0; i < countTest; i++) {
            selectedTypeAskPanels[i] = new SelectedTypeAskPanel();
            jTabbedPane.add(selectedTypeAskPanels[i]);
            jTabbedPane.setTitleAt(i, "Задание " + (i + 1));
        }
        jTabbedPane.setVisible(true);

        jProgressBar.setIndeterminate(false);
    }//GEN-LAST:event_jButtonCreateActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        jProgressBar.setIndeterminate(true);
        if (selectedTypeAskPanels != null) {
            // Соберем все в один массив
            ItemTest[] itemTests = new ItemTest[registTestPanel.getCountTest()];
            String warning = null;
            for (int i = 0; i < selectedTypeAskPanels.length; i++) {
                // Заполним масив который будет сохраняться.
                itemTests[i] = selectedTypeAskPanels[i].returnItemTest();
                if (itemTests[i] == null) {
                    SMS.message(this, (i + 1) + " задание еще не создано!");
                    this.setVisible(true);
                    this.jTabbedPane.setSelectedIndex(i);
                    jProgressBar.setIndeterminate(false);
                    return;
                }
                // Каждый элимент проверим на его заполненость.
                warning = itemTests[i].checkToPrepare();
                if (warning != null && !warning.trim().isEmpty()) {
                    SMS.warning(this, (i + 1) + " задание:\n" + warning);
                    this.jTabbedPane.setSelectedIndex(i);
                    this.setVisible(true);
                    jProgressBar.setIndeterminate(false);
                    return;
                }
            }

            try {
                //Создадим точку возврата
                ua.edu.odeku.pet.database.DataBaseConnect.setStaticSavepoint();
                // Cохраним сам тест
                warning = registTestPanel.saveTest();
                if (warning == null || warning.trim().isEmpty()) {
                    // Получим код теста
                    Integer idTest = registTestPanel.getIdTest();
                    // Пройдемся по всем заданиям и сохраним их
                    for (int i = 0; i < itemTests.length; i++) {
                        try {
                            warning = itemTests[i].saveItemTest(idTest);
                        } catch (Exception ex) {
                            SMS.error(ex.toString());
                            ua.edu.odeku.pet.database.DataBaseConnect.rollBackStatic();
                            jProgressBar.setIndeterminate(false);
                            return;
                        }
                        // Если были ошибки то прервем сохранение
                        if (!warning.trim().isEmpty()) {
                            SMS.warning(this, "В задании " + (i + 1) + " : " + warning);
                            // Тут по идее откат....
                            ua.edu.odeku.pet.database.DataBaseConnect.rollBackStatic();
                            jProgressBar.setIndeterminate(false);
                            return;
                        }
                    }
                    SMS.message("Тест успешно сохранен");
                    this.dispose();
                } else {
                    SMS.warning(this, warning);
                    //Откат изменений
                    ua.edu.odeku.pet.database.DataBaseConnect.rollBackStatic();
                    // Тут откат необходимо сделать
                }
            } catch (SQLException ex) {
                SMS.error(this, ex.toString());
                Logger.getLogger(TestsFrame.class.getName()).log(Level.SEVERE, null, ex);
                SMS.error("Произошла ошибка сохранение отменено");
            }
        } else {
            SMS.message(this, "Сначало вам необходимо создать тесты.");
        }
        jProgressBar.setIndeterminate(false);
    }//GEN-LAST:event_jButtonSaveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCreate;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JPanel jPanel;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JTabbedPane jTabbedPane;
    private ua.edu.odeku.pet.gui.tests.RegistTestPanel registTestPanel;
    // End of variables declaration//GEN-END:variables
}
